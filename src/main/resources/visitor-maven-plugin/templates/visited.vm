#* Copyright 2016 Yahoo Inc. *#
#* Licensed under the terms of the Apache 2.0 license. Please see LICENSE file in the project root for terms. #*
#* @vtlmacrolibrary path="VM_global_library.vm" *#
#* @vtlvariable name="c" type="com.yahoo.maven.visitor.VisitedContext" *#
#* @vtlvariable name="display" type="org.apache.velocity.tools.generic.DisplayTool" *#
// Generated by visitor-maven-plugin
#pkg($c)import java.util.Objects;

public interface ${c.visitedClassName}#if(${c.typeParameters})<#foreach($p in $c.typeParameters)${p.name}#if(${p.constraint}) extends ${p.constraint}#end#if($foreach.hasNext), #end#end>#end {

    <E extends Exception, T> T accept(${c.visitedClassName}Visitor<#if(${c.typeParameters})#foreach($p in $c.typeParameters)? super ${p.name}, #end#{end}E, T> visitor) throws E;

#foreach($d in $c.disjuncts)    default boolean is${display.capitalize($d.methodName)}() {
        return accept(new Defaulting${c.visitedClassName}Visitor<#foreach($p in $c.typeParameters)${p.name}, #{end}RuntimeException, Boolean>() {
            @Override
            public Boolean getDefault() {
                return false;
            }

            @Override
            public Boolean #visitorSignature($d) {
                return true;
            }
        });
    }

#if($d.hasAsMethod())    default $d.parameters[0].type as${display.capitalize($d.methodName)}() {
        return accept(new Defaulting${c.visitedClassName}Visitor<#foreach($p in $c.typeParameters)${p.name}, #{end}RuntimeException, $d.parameters[0].type>() {
            @Override
            public $d.parameters[0].type getDefault() {
                return null;
            }

            @Override
            public $d.parameters[0].type #visitorSignature($d) {
                return $d.parameters[0].name;
            }
        });
    }
#end

#end
#foreach($d in $c.disjuncts)    static #if(${c.typeParameters})<#foreach($p in $c.typeParameters)${p.name}#if(${p.constraint}) extends ${p.constraint}#end#if($foreach.hasNext), #end#end> #end${c.visitedClassName}#if(${c.typeParameters})<#foreach($p in $c.typeParameters)${p.name}#if($foreach.hasNext), #end#end>#end ${d.methodName}(#foreach($p in ${d.parameters})$p.covariantType $p.name#if($foreach.hasNext), #end#end) {
        return new ${c.visitedClassName}#if(${c.typeParameters})<#foreach($p in $c.typeParameters)${p.name}#if($foreach.hasNext), #end#end>#end() {

            public <E extends Exception, T> T accept(${c.visitedClassName}Visitor<#if(${c.typeParameters})#foreach($p in $c.typeParameters)? super ${p.name}, #end#{end}E, T> visitor) throws E {
                return visitor.${d.methodName}(#foreach($p in ${d.parameters})$p.name#if($foreach.hasNext), #end#end);
            }

            @Override
            public boolean equals(Object o) {
                if (this == o) return true;
                if (o == null || getClass() != o.getClass()) return false;

                ${c.visitedClassName}#if($c.typeParameters)<#foreach($p in $c.typeParameters)?#if(${p.constraint}) extends ${p.constraint}#end#if($foreach.hasNext), #end#end>#end oo = (${c.visitedClassName}) o;

                return oo.accept(new Defaulting${c.visitedClassName}Visitor<#foreach($p in $c.typeParameters)#if($p.constraint)$p.constraint#{else}Object#end, #{end}RuntimeException, Boolean>() {
                    @Override
                    public Boolean getDefault() {
                        return false;
                    }

                    @Override
                    public Boolean ${d.methodName}(#foreach($p in ${d.parameters})#if($p.parametricTypeBound)$p.parametricTypeBound#else${p.wildcardType}#end ${p.name}_#{if}($foreach.hasNext), #end#end) {
                        #foreach($p in ${d.parameters})if (!Objects.equals($p.name, ${p.name}_)) return false;
                        #{end}return true;
                    }
                });
            }

            @Override
            public int hashCode() {
                int result = 0;
                #foreach($p in $d.parameters)result = 31 * result + $p.hashExpression;
                #{end}return result;
            }

            @Override
            public String toString() {
                return "${d.methodName}(#if($d.parameters)" + #foreach($p in $d.parameters)$p.name + #if($foreach.hasNext)", " + #end#end"#end)";
            }
        };
    }

#end}
